{
	"info": {
		"_postman_id": "fa4611cc-e20e-49ad-ae2c-93042ec23163",
		"name": "Swagger: Book Store API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23423630"
	},
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"userID\", jsonData.userID);\r",
							"\r",
							"pm.test(\"Status Code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Status Code Check\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 404, 406]);\r",
							"});\r",
							"\r",
							"pm.test(\"Test Username\", function () {\r",
							"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"username\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(jsonData.username).to.include(\"Ahsan\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 700ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userName\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}"
				},
				"url": {
					"raw": "https://bookstore.toolsqa.com/Account/v1/User",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"Account",
						"v1",
						"User"
					]
				}
			},
			"response": []
		},
		{
			"name": "Generate Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"token\", jsonData.token);\r",
							"\r",
							"pm.test(\"Status Code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status Code Check\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);\r",
							"});\r",
							"\r",
							"pm.test(\"Test Status Value\", function () {\r",
							"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(jsonData.result).to.include(\"authorized\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Status Code Name has String\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userName\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}"
				},
				"url": {
					"raw": "https://bookstore.toolsqa.com/Account/v1/GenerateToken",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"Account",
						"v1",
						"GenerateToken"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authorized",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status Code Name has String\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status Code Check\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"true\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userName\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}"
				},
				"url": {
					"raw": "https://bookstore.toolsqa.com/Account/v1/Authorized",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"Account",
						"v1",
						"Authorized"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status Code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status Code Name has String\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status Code Check\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 401]);\r",
							"});\r",
							"\r",
							"pm.test(\"Test User ID\", function () {\r",
							"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Test Username\", function () {\r",
							"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"username\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://bookstore.toolsqa.com/Account/v1/User/{{userID}}",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"Account",
						"v1",
						"User",
						"{{userID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get List of Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonResponse = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"isbn\", jsonResponse.books[0].isbn);\r",
							"\r",
							"pm.test(\"Status Code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status Code Name has String\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"isbn\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://bookstore.toolsqa.com/BookStore/v1/Books",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"BookStore",
						"v1",
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Book to User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status Code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Status Code Name has String\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status Code Check\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 400, 401]);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"isbn\");\r",
							"});\r",
							"\r",
							"pm.test(\"Test isbn\", function () {\r",
							"    pm.expect(jsonData.books[0].isbn).to.eql(pm.environment.get(\"isbn\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userId\": \"{{userID}}\",\n  \"collectionOfIsbns\": [\n    {\n      \"isbn\": \"9781449325862\"\n    }\n  ]\n}"
				},
				"url": {
					"raw": "https://bookstore.toolsqa.com/BookStore/v1/Books",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"BookStore",
						"v1",
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specific Book Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonResponse = pm.response.json();\r",
							"\r",
							"pm.test(\"Status Code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status Code Name has String\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status Code Check\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);\r",
							"});\r",
							"\r",
							"pm.test(\"Test isbn\", function () {\r",
							"    pm.expect(jsonResponse.isbn).to.eql(pm.environment.get(\"isbn\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"author\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://bookstore.toolsqa.com/BookStore/v1/Book?ISBN={{isbn}}",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"BookStore",
						"v1",
						"Book"
					],
					"query": [
						{
							"key": "ISBN",
							"value": "{{isbn}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Added Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status Code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status Code Name has String\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status Code Check\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);\r",
							"});\r",
							"\r",
							"pm.test(\"Test User ID\", function () {\r",
							"    pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Test Username\", function () {\r",
							"    pm.expect(jsonData.username).to.eql(pm.environment.get(\"username\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Test isbn\", function () {\r",
							"    pm.expect(jsonData.books[0].isbn).to.eql(\"9781449331818\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"books\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userId\": \"{{userID}}\",\n  \"isbn\": \"9781449331818\"\n}"
				},
				"url": {
					"raw": "https://bookstore.toolsqa.com/BookStore/v1/Books/{{isbn}}",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"BookStore",
						"v1",
						"Books",
						"{{isbn}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete All Books from User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Status Code Name has String\", function () {\r",
							"    pm.response.to.have.status(\"No Content\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status Code Check\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([204, 401]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://bookstore.toolsqa.com/BookStore/v1/Books?UserId={{userID}}",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"BookStore",
						"v1",
						"Books"
					],
					"query": [
						{
							"key": "UserId",
							"value": "{{userID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status Code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Status Code Name has String\", function () {\r",
							"    pm.response.to.have.status(\"No Content\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status Code Check\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 401]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://bookstore.toolsqa.com/Account/v1/User/{{userID}}",
					"protocol": "https",
					"host": [
						"bookstore",
						"toolsqa",
						"com"
					],
					"path": [
						"Account",
						"v1",
						"User",
						"{{userID}}"
					]
				}
			},
			"response": []
		}
	]
}